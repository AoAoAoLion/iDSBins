#!/usr/bin/perl
use strict;
use warnings;
my $version="1.0 version";
use Getopt::Long;

#Author:Xin Wang 
#email: xin.wang@childrens.harvard.edu
#PI: Kaifu Chen

### This script is to estimate the large insertion events that cannot assembled:
### Requirement: the mapping position is within 5kb.

####
my %opts;
GetOptions(\%opts,"i:s","o:s","g:s","c:s","t:s","h:s");
print "*************\n*$version*\n*************\n";
if (!defined $opts{i} || !defined $opts{o} || !defined $opts{c} ||defined $opts{h}) {
	die "************************************************************************
	Usage: ${0}.pl -i BLAST -c clusterinformation for unassembled -g allow_gap_size_for_PE -o Blast_categories
		
	-i BLAST results that detected after the unassembled insertion Estimatation
	-c Cluster results that generated by first round of deduplication (the file contain coverage and quality information)
	-g Allowed gap size between two donors
	-h help
************************************************************************\n";
}

my $index=$opts{i};
my $output=$opts{o};
my $gap=(defined $opts{g})?$opts{g}:3000;

my $cls=$opts{c}; my %qual; my %cov;

open CLS,"$cls" or die $!;
while (<CLS>){
	chomp;
	my ($type,$Rcounts,$RID,$Rqual)=(split/\t/,$_)[0,2,3,4];
	
	$qual{$RID}=$Rqual;
	$cov{$RID}=$Rcounts;
}
close CLS;



open G,"$index" or die $!;
open O,">$output.oneinsert.txt" or die $!;
#open CO,">$output.oneinsert_withgap.txt" or die $!;
open TI, ">$output.twoinsert.txt" or die $!;

print O "ReadCounts\tqID\tPID\tInsertsize\tFstart\tFend\tRstart\tRend\tFqstart\tRqstart\tFqend\tRqend\tFlength\tRlength\tQuality\tStrand\n";
my %inf2; my %confInsert2;

while (<G>) {
	chomp;
    # print "$_" ;
	my ($qid,$pid,$identity,$match,$qgap,$mismatch,$qstart,$qend,$qlength,$pstart,$pend,$plength,$score,$evlaue)=split/\s+/,$_;
	my $information=$_;
	if ($pid eq "nondetectable"){
		print TI "$qid\tnondetectable\tundefined\n";
		next;
	}
	
	
	my $start=($pstart<$pend)?$pstart:$pend;
	my $end=($pstart<$pend)?$pend:$pstart;
	my $strand=($pstart<$pend)?"+":"-";

	if (exists $confInsert2{$qid}){
		
		# if ($pid eq $inf2{$qid}->{chr}){
		# 	$size=$inf2{$qid}->{end}-$start+1;
		# }
		if ($pid eq $inf2{$qid}->{chr} && (($start>=$inf2{$qid}->{start} && $start<=$inf2{$qid}->{end}) || ($inf2{$qid}->{start}>=$start && $inf2{$qid}->{start} <=$end)) ){
			my @array= sort { $a <=> $b }($start,$inf2{$qid}->{start},$end,$inf2{$qid}->{end});
			my @arrayR= sort { $a <=> $b }($qstart,$inf2{$qid}->{qstart},$end,$inf2{$qid}->{qend});
			
			my $length=$array[3]-$array[0];
			my $str=join "\t",@array;
			my $fident=($identity+$inf2{$qid}->{identity})/2;
			
			
			#### Print similar format with blast results
			#print O "$cov{$pid}\t$qid\t$pid\t$fident\t$length\t$fgap\t0\t$arrayR[0]\t$arrayR[2]\t\t$inf2{$qid}->{qstart}\t$qstart\t$inf2{$qid}->{qend}\t$qend\t$qlength\n";
			
			print O "$cov{$qid}\t$qid\t$pid\t$fident\t$length\t$str\t$inf2{$qid}->{qstart}\t$qstart\t$inf2{$qid}->{qend}\t$qend\t$inf2{$qid}->{qlength}\t$qlength\t$qual{$qid}\t$strand\n";
		}elsif ($pid eq $inf2{$qid}->{chr} && $start > $inf2{$qid}->{end} && ($start - $inf2{$qid}->{end}) < $gap){
			my @array= sort { $a <=> $b }($start,$inf2{$qid}->{start},$end,$inf2{$qid}->{end});
			my $length=$array[3]-$array[0];
			my $str=join "\t",@array;
			my $fident=($identity+$inf2{$qid}->{identity})/2;
			print O "$cov{$qid}\t$qid\t$pid\t$fident\t$length\t$str\t$inf2{$qid}->{qstart}\t$qstart\t$inf2{$qid}->{qend}\t$qend\t$inf2{$qid}->{qlength}\t$qlength\t$qual{$qid}\t$strand\n";
        }elsif ($pid eq $inf2{$qid}->{chr} && $inf2{$qid}->{start} > $end && ($inf2{$qid}->{start}-$end) <$gap){
        	
			my @array= sort { $a <=> $b }($start,$inf2{$qid}->{start},$end,$inf2{$qid}->{end});
			my $length=$array[3]-$array[0];
			my $fident=($identity+$inf2{$qid}->{identity})/2;
			my $str=join "\t",@array;
			print O "$cov{$qid}\t$qid\t$pid\t$fident\t$length\t$str\t$inf2{$qid}->{qstart}\t$qstart\t$inf2{$qid}->{qend}\t$qend\t$inf2{$qid}->{qlength}\t$qlength\t$qual{$qid}\t$strand\n";
		
		
		}else{
			print TI "$confInsert2{$qid}\n$information\tundefined\n";
		}
		
		$inf2{$qid}->{chr}=$pid;
		$inf2{$qid}->{start}=$start;
		$inf2{$qid}->{end}=$end;
		$inf2{$qid}->{qstart}=$qstart;
		$inf2{$qid}->{qlength}=$qlength;
		$inf2{$qid}->{qend}=$qend;
		$inf2{$qid}->{identity}=$identity;
		$confInsert2{$qid}=$information;
	}else{
		$inf2{$qid}->{chr}=$pid;
		$inf2{$qid}->{start}=$start;
		$inf2{$qid}->{end}=$end;
		$inf2{$qid}->{qstart}=$qstart;
		$inf2{$qid}->{qend}=$qend;
		$inf2{$qid}->{identity}=$identity;
		$confInsert2{$qid}=$information;
		$inf2{$qid}->{qlength}=$qlength;
		#print "$information\n";
	}

}
close G;
close O;
close TI;

